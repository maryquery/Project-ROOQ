var API, MusicPlayerAPI, checkToken, conf, config, error, fs, home, homedir, ok, path, pkg, program, readline;

MusicPlayerAPI = require("musicplayer");

program = require("commander");

pkg = require("../package.json");

homedir = require("os-homedir");

path = require("path");

fs = require("fs");

readline = require("readline-sync");

home = homedir();

config = path.join(home, ".musicplayer", "config.json");

checkToken = function() {
  var API, answer, conf, err;
  answer = readline.question("What is your token? Get one here: http://r.il.ly/remote \n> ");
  try {
    fs.mkdirSync(path.join(home, ".musicplayer"));
  } catch (_error) {
    err = _error;
    console.error("");
  }
  conf = {
    token: answer,
    url: "https://reddit.musicplayer.io"
  };
  fs.writeFileSync(config, JSON.stringify(conf, null, 2));
  console.log("Token saved in: ", config);
  return API = MusicPlayerAPI(conf);
};

try {
  conf = require(config);
  API = MusicPlayerAPI(conf);
} catch (_error) {
  error = _error;
  checkToken();
}

ok = "👍  OK";

error = function(res) {
  console.error("👎  ", res.message);
  checkToken();
  console.log("Now try again");
  return process.exit();
};

program.version("" + pkg.version).command("play").description("Play the song").action(function(env) {
  return API.play.get(function(isPlaying) {
    if (isPlaying.status === false) {
      return error(isPlaying);
    }
    if (isPlaying.data === false) {
      return API.play.post(function(res) {
        if (res.status === false) {
          return error(res);
        }
        return console.log(ok);
      });
    }
  });
});

program.command("pause").alias("stop").description("Pause the song").action(function(env) {
  return API.play.get(function(isPlaying) {
    if (isPlaying.status === false) {
      return error(isPlaying);
    }
    if (isPlaying.data === true) {
      return API.play.post(function(res) {
        if (res.status === false) {
          return error(res);
        }
        return console.log(ok);
      });
    }
  });
});

program.command("toggle").description("Toggle the song").action(function(env) {
  return API.play.post(function(res) {
    if (res.status === false) {
      return error(res);
    }
    return console.log(ok);
  });
});

program.command("forward").alias("next").description("Next song").action(function(env) {
  return API.forward.post(function(res) {
    if (res.status === false) {
      return error(res);
    }
    return console.log(ok);
  });
});

program.command("backward").alias("prev").description("Previous song").action(function(env) {
  return API.backward.post(function(res) {
    if (res.status === false) {
      return error(res);
    }
    return console.log(ok);
  });
});

program.command("state").description("Get player state").action(function(env) {
  return API.play.get(function(res) {
    if (res.status === false) {
      return error(res);
    }
    return console.log("Playing:", res.data);
  });
});

program.command("subreddits [subs]").description("Get or set subreddits").action(function(env) {
  if (env != null) {
    return API.subreddits.post({
      subreddits: env
    }, function(res) {
      if (res.status === false) {
        return error(res);
      }
      return console.log("Subreddits sent:", res.subreddits);
    });
  } else {
    return API.subreddits.get(function(res) {
      if (res.status === false) {
        return error(res);
      }
      return console.log("Subreddits:", res.data.join(", "));
    });
  }
}).on("--help", function() {
  return console.log("Examples:\n  $ musicplayer subreddits listentothis+music\n  $ musicplayer subreddits atmosphericdnb\n\n  $ musicplayer subreddits");
});

program.command("user").description("Get user information").action(function(env) {
  return API.user.get(function(res) {
    var user;
    if (res.status === false) {
      return error(res);
    }
    user = res.data;
    return console.log("👤  username         " + user.name + "\n🔗  link karma       " + user.link_karma + "\n💬  comment karma    " + user.comment_karma);
  });
});

program.command("song").description("Get song information").action(function(env) {
  return API.song.get(function(res) {
    var song;
    if (res.status === false) {
      return error(res);
    }
    song = res.data;
    return console.log("🎵  " + song.title + "\n👤  /u/" + song.author + "\n🌍  /r/" + song.subreddit + "\n\n🎵  type       " + song.type + "\n📅  age        " + song.created_ago + " ago\n👍  karma      " + song.score + "\n🔗  url        " + song.url);
  });
});

program.command("*").description("Help").action(function() {
  return program.help();
});

program.parse(process.argv);
